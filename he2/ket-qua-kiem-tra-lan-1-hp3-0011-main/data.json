[
  {
    "Mã học sinh": "HCM-DS17-000714",
    "Tên học sinh": "Trần Nguyên Khang",
    "Ngày sinh": "06/09/2007",
    "Điểm": "8.5",
  "Bài làm": "<pre><code class=\"language-python\">class LabourContract:\n    def __init__(self, id: str, full_name: str, position: str, basic_salary: int, allowance = 0, day_start = &quot;01/01/2025&quot;):\n        self.id = id\n        self.full_name = full_name\n        self.position = position\n        self.day_start = day_start\n        self.year_start = int(self.day_start[-4:])\n        self.working_year = 2025 - self.year_start\n        self.basic_salary = basic_salary\n        self.allowance = allowance\n\n        self.reward = 0\n        self.project = None\n        self.project_reward()\n\n        self.income = 0\n        self.calculate_income\n\n        self.senority_allowance = 0\n        self.calculate_senority_allowance()\n\n        self.position_allowance = 3000000 if self.position.lower() == &quot;quản lý dự án&quot; else 0\n\n    def project_reward(self):\n        if self.project == &quot;Dự án trong nước&quot;:\n            self.reward = 0.1 * self.basic_salary\n        elif self.project == &quot;Dự án khách hàng nước ngoài&quot;:\n            self.reward = 0.2 * self.basic_salary\n        elif self.project == &quot;Dự án chiến lược&quot;:\n            self.reward = 0.3 * self.basic_salary\n\n    def get_id(self):\n        return self.id\n\n    def get_basic_salary(self):\n        return self.basic_salary\n\n    def calculate_income(self):\n        self.income = self.basic_salary + self.allowance + self.reward\n\n    def calculate_tax(self):\n        return 0.1 * (self.income - 11000000) if self.income >= 11000000 else 0\n\n    def calculate_senority_allowance(self):\n        if self.working_year > 5:\n            self.senority_allowance = 5000000\n        elif self.working_year > 10:\n            self.senority_allowance = 10000000\n\n\nnv1 = LabourContract(&quot;HĐNV1023&quot;, &quot;Nguyễn Văn A&quot;, &quot;Lập trình viên&quot;, 15000000, 2000000, &quot;01/03/2025&quot;)</code></pre>",
"Nhận xét": "Bài lớp <code>LabourContract</code> có đầy đủ các thuộc tính: mã hợp đồng, họ tên nhân viên, vị trí, ngày bắt đầu, lương cơ bản và phụ cấp.<br> <br>Phần getter đã viết, tuy nhiên thiếu setter, và chưa kiểm tra định dạng mã hợp đồng cũng như xác minh lương > 0.<br><br>Constructor có tham số viết đúng và có giá trị mặc định hợp lý. Tuy nhiên, thiếu constructor mặc định theo đúng dữ liệu yêu cầu.<br> <br>Hàm tính tổng thu nhập bị gọi sai do thiếu dấu ngoặc (), và thưởng không được cộng vì gọi <code>project_reward</code> trước khi gán project.<br> <br>Hàm tính thuế TNCN đúng công thức, nhưng sai kết quả do lấy sai thu nhập đầu vào.<br> <br>Phần chính sách hỗ trợ viết đầy đủ, nhưng sai logic <code>if > 5</code> viết trước <code>elif > 10</code> khiến không bao giờ vào được nhánh hỗ trợ 10 năm.<br><br>Tổng thể, bài viết đúng hướng, tổ chức mã rõ ràng, chỉ cần khắc phục một vài lỗi kỹ thuật nhỏ."

  },
  {
    "Mã học sinh": "Teky_HCM01-000826",
    "Tên học sinh": "Nguyễn Đinh Thiên Phú",
    "Ngày sinh": "23/11/2009",
    "Điểm": "6",
  "Bài làm": "<pre><code class=\"language-python\">class Employment_Contract:\n    def __init__(self, Contract_ID, Employ_Name, Type_Job, Start_Date, Basic_Salary, Allowance):\n        self.ConTract_ID = \"HĐNV\" + Contract_ID\n        self.Employ_Name = Employ_Name\n        self.Type_Job = Type_Job\n        self.Start_Date = Start_Date\n        self.Basic_Salary = Basic_Salary\n        self.Allowance = Allowance\n\n    def Get_Contract_ID(self):\n        return self.ConTract_ID\n\n    def Get_Basic_Salary(self):\n        return self.Basic_Salary\n\n    def Default(self):\n        self.ConTract_ID = \"HĐNV1023\"\n        self.Employ_Name = \"Nguyễn Văn A\"\n        self.Type_Job = \"Lập trình viên\"\n        self.Start_Date = 2025/3/1\n        self.Basic_Salary = 15000000\n        self.Allowance = 2000000\n\n    def Init2(self, Contract_ID, Employ_Name, Job_Type, Basic_Salary):\n        self.ConTract_ID = \"HĐNV\" + Contract_ID\n        self.Employ_Name = Employ_Name\n        self.Type_Job = Job_Type\n        self.Start_Date = 2025/1/1\n        self.Basic_Salary = Basic_Salary\n        self.Allowance = 0\n\n    def Income(self, Project_Type):\n        Project_Bonus = Project_Type * self.Basic_Salary\n        self.Total_Income = self.Basic_Salary + self.Allowance + Project_Bonus\n        return self.Total_Income\n\n    def Tax(self):\n        Tax_Rate = 0.1\n        if self.Total_Income > 11000000:\n            self.Tax_Amount = Tax_Rate * self.Total_Income\n            return self.Tax_Amount\n        return 0\n\n    def Support(self):\n        Quantity_Contract = int(input(\"Nhập số lượng hợp đồng tham gia: \"))\n        Working_Time = int(2025 - self.Start_Date)\n        self.Support_Amount = 0\n        if 10 > Working_Time >= 5:\n            self.Support_Amount = 5000000\n        elif Working_Time >= 10:\n            self.Support_Amount = 10000000\n        if self.Type_Job == \"Quản lý dự án\":\n            self.Support_Amount += 3000000 * Quantity_Contract\n        return self.Support_Amount\n\n\ndef main():\n    print(\"\"\"Loại dự án:\n          1.Dự án trong nước\n          2.Dự án khách hàng nước ngoài\n          3.Dự án chiến lược\"\"\")\n    Project_Type = int(input(\"Nhập loại dự án (1-3): \"))\n    Num = 0\n    if Project_Type == 1:\n        Num = 0.1\n    elif Project_Type == 2:\n        Num = 0.2\n    elif Project_Type == 3:\n        Num = 0.3\n    else:\n        print(\"Loại dự án không hợp lệ.\")\n\n    Contract = Employment_Contract(\"1010\", \"Nguyễn Văn B\", \"Quản lý dự án\", 2009/1/1, 10000000, 2500000)\n    print(Contract.Income(Num))\n    print(Contract.Tax())\n    print(Contract.Support())\n\n\nif __name__ == \"__main__\":\n    main()</code></pre>",
  "Nhận xét": "Lớp `Employment_Contract` có đầy đủ các thuộc tính cần thiết.<br>Phần getter được viết đúng nhưng không có setter, chưa kiểm tra định dạng mã hợp đồng hoặc lương > 0.<br>Constructor mặc định dùng sai định dạng ngày tháng (sử dụng phép chia `2025/3/1`), không dùng kiểu ngày hoặc chuỗi.<br>Constructor tham số viết đúng và có mặc định phụ cấp, ngày bắt đầu.<br>Hàm tính thu nhập đúng công thức nhưng thiếu phân loại rõ ràng loại dự án (dùng số thay vì chuỗi).<br>Tính thuế TNCN sai công thức vì không trừ mức giảm trừ 11.000.000.<br>Chính sách hỗ trợ viết gần đúng, nhưng sai cách thiết kế OOP (dùng input trong method), sai cách tính thời gian làm việc.<br>Tổng thể bài đúng hướng, tuy nhiên còn nhiều lỗi cơ bản về kỹ thuật và chưa tuân thủ chuẩn thiết kế hướng đối tượng."
  },
  {
    "Mã học sinh": "HCM-NTT-004563",
    "Tên học sinh": "Phan Tấn Phúc",
    "Ngày sinh": "13/06/2009",
    "Điểm": "7.5",
  "Bài làm": "<pre><code class=\"language-python\"># Chưa bao gồm kiểm tra dữ liệu đầu vào\nfrom datetime import date\n\nclass Contract:\n\n    def __init__(self):\n        self.flag()\n        self.project_reward = 0\n\n    # Hỏi user có muốn tạo hợp đồng mặc định hay ko\n    def flag(self):\n        self.flagin = input(\"Bạn có muốn tạo hợp đồng mặc định? (y/n): \")\n        if self.flagin == \"y\" or self.flagin == \"Y\":\n            self.default_input()\n        elif self.flagin == \"n\" or self.flagin == \"N\":\n            self.typein_input()\n\n    # Khởi tạo hợp đồng mặc định và có tham số\n    def default_input(self):\n        self.contractID = \"HĐNV1023\"\n        self.name = \"Nguyễn Văn A\"\n        self.position = \"Lập trình viên\"\n        self.startdate = [1, 3, 2025]\n        self.basic_salary = 15000000\n        self.allowance = 2000000\n\n    def typein_input(self):\n        self.contractID = input(\"Nhập mã hợp đồng (HĐNVxxxx): \")\n        self.name = input(\"Nhập họ tên nhân viên: \")\n        self.position = input(\"Nhập vị trí nhân viên: \")\n        self.startdate = [1, 1, 2025]\n        self.basic_salary = int(input(\"Nhập mức lương cơ bản của nhân viên: \"))\n        self.allowance = 0\n\n    # Lấy thông tin mã hợp đồng và mức lương cơ bản\n    def getinfo(self):\n        print(f\"\"\"\nMã hợp đồng: {self.contractID}\nMức lương cơ bản: {self.basic_salary}\n\"\"\")\n\n    # Tính tổng thu nhập của nhân viên\n    def what_project(self):\n        print(\"\"\"Các loại dự án:\n1. Dự án trong nước\n2. Dự án khách hàng nước ngoài\n3. Dự án chiến lược\n\"\"\")\n        self.project_type = int(input(\"Nhân viên tham gia loại dự án nào? (Chọn 1/2/3): \"))\n        if self.project_type == 1:\n            self.project_reward = 10\n        elif self.project_type == 2:\n            self.project_reward = 20\n        elif self.project_type == 3:\n            self.project_reward = 30\n        else:\n            print(\"Đầu vào không hợp lệ. Mặc định thưởng dự án là 0%\")\n\n    def total_income(self):\n        return self.basic_salary * (1 + self.project_reward / 100) + self.allowance\n\n    # Tính thuế TNCN\n    def income_tax(self, income):\n        return 0.1 * (income - 11000000)\n\n    # Chính sách hỗ trợ\n    def support(self):\n        current_year = date.today().year\n        year_worked = self.startdate[2] - current_year\n        if year_worked >= 10:\n            print(\"Được hỗ trợ 10.000.000 VND/năm\")\n        elif year_worked >= 5:\n            print(\"Được hỗ trợ 5.000.000 VND/năm\")\n\n        if self.position == \"Quản lý dự án\":\n            print(\"Được hỗ trợ thêm 3.000.000 VND mỗi hợp đồng\")\n\n\ndef main():\n    print(\"\\n---Nhập thông tin---\")\n    contract = Contract()\n\n    print(\"\\n---Lấy thông tin: Mã hợp đồng, Mức lương cơ bản---\")\n    contract.getinfo()\n\n    print(\"\\n---Tính tổng thu nhập của nhân viên---\")\n    contract.what_project()\n    income = contract.total_income()\n    print(f\"Tổng thu nhập của nhân viên là {income} VND\")\n\n    print(\"\\n---Tính thuế TNCN---\")\n    print(f\"Thuế TNCN của nhân viên là {contract.income_tax(income)}\")\n\n    print(\"\\n---Chính sách hỗ trợ---\")\n    contract.support()\n\n\nif __name__ == \"__main__\":\n    main()</code></pre>",
      "Nhận xét": "Bài viết có tổ chức tốt, sử dụng class rõ ràng và tách hàm hợp lý.<br> Có phân biệt giữa khởi tạo mặc định và nhập từ người dùng.<br> Tách biệt chức năng từng phần: nhập dữ liệu, tính thu nhập, thuế, hỗ trợ.<br>Biết dùng `datetime` để lấy năm hiện tại.<br><br>Chưa kiểm tra tính hợp lệ đầu vào như yêu cầu (mã hợp đồng, số âm, chuỗi rỗng...).<br>`year_worked` bị tính sai: phải là `current_year - self.startdate[2]` thay vì ngược lại.<br>Chưa chuẩn hóa xử lý dữ liệu ngày tháng, nên `startdate` chỉ là danh sách `[ngày, tháng, năm]`, không tiện so sánh.<br>Thuế TNCN không có điều kiện kiểm tra thu nhập vượt 11tr mới đánh thuế.<br>Chưa xử lý được số hợp đồng cho hỗ trợ quản lý dự án (phải nhập số hợp đồng).<br><br>💡 Gợi ý cải thiện:<br>- Nên dùng `datetime.date` cho `startdate` thay vì danh sách.<br>- Dùng setter/getter hoặc property để bảo vệ và truy cập thuộc tính tốt hơn.<br>- Cân nhắc tách input ra khỏi class để dễ test và tái sử dụng class `Contract`.<br><br>👉 Tổng thể: Bài viết đúng cấu trúc, rõ ràng, hợp lý nhưng còn nhiều lỗi logic nhỏ cần chỉnh để chạy chính xác và hoàn thiện hơn."
  },
  {
    "Mã học sinh": "Teky_HCM01-000556",
    "Tên học sinh": "Nguyễn Tuấn Kiệt",
    "Ngày sinh": "15/02/2010",
    "Điểm": "8.0",
  "Bài làm": "<pre><code class=\"language-python\">@classmethod\ndef init_with_defaults(cls, ID, name, pos, basesalary):\n    return cls(\n        ID,\n        name,\n        pos,\n        \"01/01/2025\",\n        basesalary,\n        0\n    )\n\n\ndef get_contract_id(self):\n    return self._ID\n\n\ndef set_contract_id(self, ID):\n    if len(ID) == 8 and ID.startswith(\"HĐNV\") and ID[4:].isdigit():\n        self._ID = ID\n    else:\n        raise ValueError(\"Invalid contract ID\")\n\n\ndef get_base_salary(self):\n    return self._basesalary\n\n\ndef set_base_salary(self, basesalary):\n    if basesalary > 0:\n        self._basesalary = basesalary\n    else:\n        raise ValueError(\"Base salary must be > 0\")\n\n\ndef calculate_income(self, projectType):\n    bonus = 0\n    ptype = projectType.lower()\n    if ptype == \"trong nuoc\":\n        bonus = 0.1 * self._basesalary\n    elif ptype == \"nuoc ngoai\":\n        bonus = 0.2 * self._basesalary\n    elif ptype == \"chien luoc\":\n        bonus = 0.3 * self._basesalary\n    return self._basesalary + self.allowance + bonus\n\n\ndef calculate_income_tax(self, projectType):\n    totalincome = self.calculate_income(projectType)\n    deduction = 11000000\n    taxable = max(totalincome - deduction, 0)\n    tax = 0.1 * taxable\n    return tax\n\n\ndef calculate_support(self, isMngr=False):\n    currYr = datetime.now().year\n    yrsWorked = currYr - self.startdate.year\n    supp = 0\n\n    if yrsWorked > 10:\n        supp += 10000000 * yrsWorked\n    elif yrsWorked > 5:\n        supp += 5000000 * yrsWorked\n    if isMngr:\n        supp += 3000000\n    return supp\n\n\ndef __str__(self):\n    return (\n        f\"Contract ID: {self._ID}, Name: {self.name}, Position: {self.pos}, \"\n        f\"Base Salary: {self._basesalary:,} VND, Allowance: {self.allowance:,} VND, \"\n        f\"Start Date: {self.startdate.strftime('%d/%m/%Y')}\"\n    )</code></pre>",
    "Nhận xét": "Bài viết có cấu trúc rõ ràng, tổ chức tốt các phương thức thành phần như thu nhập, thuế, hỗ trợ, hiển thị.<br>Khởi tạo đối tượng bằng constructor có tham số hợp lý, xử lý đúng kiểu dữ liệu.<br>Tính tổng thu nhập theo loại dự án đầy đủ: trong nước, nước ngoài, chiến lược, đúng yêu cầu bài toán.<br>Thuế TNCN áp dụng đúng công thức, có giảm trừ 11 triệu và điều kiện tính thuế.<br>Chính sách hỗ trợ tính theo số năm làm việc và vị trí quản lý, cài đặt chính xác.<br><br>- Thiếu hoàn toàn `getter/setter` và ràng buộc kiểm tra định dạng mã hợp đồng hoặc lương.<br>- Không có constructor mặc định với dữ liệu mẫu như yêu cầu.<br>- Ngày bắt đầu hợp đồng xử lý bằng chuỗi, dễ sai nếu định dạng đầu vào không đúng.<br>- Không kiểm tra nếu năm bắt đầu > năm hiện tại (có thể ra số âm).<br><br>Gợi ý:<br>- Bổ sung `getter/setter` để đảm bảo tính đóng gói và kiểm tra hợp lệ dữ liệu đầu vào.<br>- Nên dùng `datetime.strptime()` thay vì tách chuỗi để xử lý ngày.<br>- Tách phần nhập dữ liệu người dùng vào một hàm riêng (`main`) để tăng tính tổ chức.<br><br>Tổng thể: Bài làm tốt, đáp ứng đầy đủ hầu hết yêu cầu về chức năng và tính toán. Cần bổ sung tính đóng gói và kiểm tra dữ liệu để hoàn chỉnh và nâng cao tính an toàn của chương trình."
  },
  {
    "Mã học sinh": "TE-000266",
    "Tên học sinh": "Phan Triết An",
    "Ngày sinh": "07/05/2007",
    "Điểm": "0",
    "Bài làm": "Không có dữ liệu bài làm",
    "Nhận xét": "Không có dữ liệu bài làm"
  },
  {
    "Mã học sinh": "Teky_Holding-000230",
    "Tên học sinh": "Dương Tuấn Tú",
    "Ngày sinh": "17/11/2010",
    "Điểm": "8.0",
  "Bài làm": "<pre><code class=\"language-python\">from datetime import datetime\nclass HopDongLaoDong:\n    def __init__(self, ma_hop_dong=\"HĐNV1023\", ho_ten_nhan_vien=\"Nguyễn Văn A\",\n                 vi_tri_cong_viec=\"Lập trình viên\", ngay_bat_dau_hop_dong=\"01/03/2025\",\n                 muc_luong_co_ban=15000000, phu_cap=2000000):\n        self.set_ma_hop_dong(ma_hop_dong)\n        self.ho_ten_nhan_vien = ho_ten_nhan_vien\n        self.vi_tri_cong_viec = vi_tri_cong_viec\n        self.ngay_bat_dau_hop_dong = ngay_bat_dau_hop_dong\n        self.set_muc_luong_co_ban(muc_luong_co_ban)\n        self.phu_cap = phu_cap\n\n    def set_ma_hop_dong(self, ma):\n        if len(ma) == 8 and ma.startswith(\"HĐNV\") and ma[4:].isdigit():\n            self.__ma_hop_dong = ma\n        else:\n            print(\"Mã hợp đồng không hợp lệ. Phải bắt đầu bằng 'HĐNV' và theo sau là 4 chữ số.\")\n\n    def get_ma_hop_dong(self):\n        return self.__ma_hop_dong\n\n    def set_muc_luong_co_ban(self, luong):\n        if luong > 0:\n            self.__muc_luong_co_ban = luong\n        else:\n            print(\"Mức lương cơ bản phải là số dương.\")\n\n    def get_muc_luong_co_ban(self):\n        return self.__muc_luong_co_ban\n\n    def nhap_hop_dong(self, ma_hd, ho_ten, vi_tri, luong):\n        self.set_ma_hop_dong(ma_hd)\n        self.ho_ten_nhan_vien = ho_ten\n        self.vi_tri_cong_viec = vi_tri\n        self.ngay_bat_dau_hop_dong = \"01/01/2025\"\n        self.set_muc_luong_co_ban(luong)\n        self.phu_cap = 0\n\n    def tinh_tong_thu_nhap(self, loai_du_an):\n        thuong = 0\n        if loai_du_an == \"trong nước\":\n            thuong = 0.10 * self.__muc_luong_co_ban\n        elif loai_du_an == \"khách hàng nước ngoài\":\n            thuong = 0.20 * self.__muc_luong_co_ban\n        elif loai_du_an == \"chiến lược\":\n            thuong = 0.30 * self.__muc_luong_co_ban\n        else:\n            print(\"Loại dự án không hợp lệ.\")\n        return self.__muc_luong_co_ban + self.phu_cap + thuong\n\n    def tinh_thue_tncn(self, loai_du_an):\n        tong_thu_nhap = self.tinh_tong_thu_nhap(loai_du_an)\n        giam_tru = 11000000\n        thue = 0.10 * max(tong_thu_nhap - giam_tru, 0)\n        return thue\n\n    def chinh_sach_ho_tro(self):\n        try:\n            ngay_bat_dau = datetime.strptime(self.ngay_bat_dau_hop_dong, \"%d/%m/%Y\")\n            hien_tai = datetime.now()\n            so_nam = (hien_tai - ngay_bat_dau).days // 365\n        except:\n            print(\"Ngày bắt đầu hợp đồng không hợp lệ.\")\n            return 0\n\n        ho_tro = 0\n        if so_nam > 10:\n            ho_tro += so_nam * 10000000\n        elif so_nam > 5:\n            ho_tro += so_nam * 5000000\n\n        if \"quản lý\" in self.vi_tri_cong_viec.lower():\n            ho_tro += 3000000\n\n        return ho_tro\n\n    def hien_thi_thong_tin(self):\n        print(f\"Mã HĐ: {self.get_ma_hop_dong()}\")\n        print(f\"Họ tên: {self.ho_ten_nhan_vien}\")\n        print(f\"Vị trí: {self.vi_tri_cong_viec}\")\n        print(f\"Ngày bắt đầu: {self.ngay_bat_dau_hop_dong}\")\n        print(f\"Lương cơ bản: {self.get_muc_luong_co_ban():,} VND\")\n        print(f\"Phụ cấp: {self.phu_cap:,} VND\")\n        print(f\"Hỗ trợ thêm: {self.chinh_sach_ho_tro():,} VND\")\n\nhd = HopDongLaoDong()\nhd.hien_thi_thong_tin()</code></pre>",
  "Nhận xét": "Bài viết có cấu trúc tốt, tổ chức đầy đủ các phương thức cần thiết.<br>Sử dụng constructor mặc định và constructor có tham số thông qua `nhap_hop_dong()`.<br>Có `setter/getter` để kiểm tra mã hợp đồng và mức lương.<br>Tính tổng thu nhập theo từng loại dự án đúng, thưởng rõ ràng.<br>Thuế TNCN được tính đúng công thức với mức giảm trừ.<br>Chính sách hỗ trợ có xử lý ngày hợp đồng bằng `datetime`, rất hợp lý.<br><br>- `so_nam` tính số năm làm việc nhưng chưa kiểm tra nếu âm (hợp đồng tương lai).<br>- `chinh_sach_ho_tro()` không yêu cầu số lượng hợp đồng quản lý => thiếu yếu tố tính đúng 3tr/hợp đồng.<br>- Không xử lý các giá trị đầu vào từ người dùng — tất cả dùng mặc định.<br>- Nếu `set_ma_hop_dong` sai định dạng, chương trình vẫn chạy tiếp mà không gán giá trị hợp lệ.<br><br>Gợi ý:<br>- Nên thêm phần nhập thông tin từ người dùng để bài hoàn chỉnh hơn.<br>- Xử lý lỗi cho `set_ma_hop_dong` bằng cách raise Exception hoặc dùng giá trị mặc định hợp lệ.<br>- Bổ sung số hợp đồng nếu là quản lý dự án để chính sách hỗ trợ chính xác hơn.<br><br>Tổng thể: Bài làm chắc tay, thể hiện hiểu rõ yêu cầu và kỹ thuật OOP. Một số phần cần bổ sung thêm tính linh hoạt và tương tác với người dùng để hoàn chỉnh hơn."
  },
  {
    "Mã học sinh": "Teky_HCM01-000665",
    "Tên học sinh": "Phù Minh Phúc",
    "Ngày sinh": "07/08/2009",
    "Điểm": "0",
    "Bài làm": "Không có dữ liệu bài làm",
    "Nhận xét": "Không có dữ liệu bài làm"
  },
  {
    "Mã học sinh": "HCM-PXL-000714",
    "Tên học sinh": "Nguyễn Nguyên Phú",
    "Ngày sinh": "27/01/2009",
    "Điểm": "8.0",
  "Bài làm": "<pre><code class=\"language-python\">class HopDongLaoDong:\n    def __init__(self, ma_hd, ho_ten, vi_tri, ngay_bat_dau, luong_cb, phu_cap):\n        self.ma_hd = ma_hd\n        self.ho_ten = ho_ten\n        self.vi_tri = vi_tri\n        self.ngay_bat_dau = int(ngay_bat_dau.split(\"/\")[-1])\n        self.luong_cb = float(luong_cb)\n        self.phu_cap = float(phu_cap)\n\n    def tinh_tong_thu_nhap(self, loai_du_an):\n        thuong = 0\n        if loai_du_an == \"trong nuoc\":\n            thuong = 0.1 * self.luong_cb\n        elif loai_du_an == \"nuoc ngoai\":\n            thuong = 0.2 * self.luong_cb\n        elif loai_du_an == \"chien luoc\":\n            thuong = 0.3 * self.luong_cb\n        return self.luong_cb + self.phu_cap + thuong\n\n    def tinh_thue(self, tong_thu_nhap):\n        giam_tru = 11000000\n        thue = 0.1 * max(0, tong_thu_nhap - giam_tru)\n        return thue\n\n    def tinh_ho_tro(self):\n        nam_hien_tai = 2025\n        so_nam = nam_hien_tai - self.ngay_bat_dau\n        ho_tro = 0\n        if so_nam > 10:\n            ho_tro += so_nam * 10000000\n        elif so_nam > 5:\n            ho_tro += so_nam * 5000000\n        if self.vi_tri.lower() == \"quan ly du an\":\n            ho_tro += 3000000\n        return ho_tro\n\n    def hien_thi(self, loai_du_an):\n        print(\"Mã hợp đồng:\", self.ma_hd)\n        print(\"Họ tên:\", self.ho_ten)\n        print(\"Vị trí:\", self.vi_tri)\n        print(\"Lương cơ bản:\", self.luong_cb)\n        print(\"Phụ cấp:\", self.phu_cap)\n\n        tong_thu_nhap = self.tinh_tong_thu_nhap(loai_du_an)\n        thue = self.tinh_thue(tong_thu_nhap)\n        ho_tro = self.tinh_ho_tro()\n\n        print(\"Tổng thu nhập:\", tong_thu_nhap)\n        print(\"Thuế TNCN:\", thue)\n        print(\"Hỗ trợ nhân viên:\", ho_tro)\n\n\n# nhập thông tin\nma_hd = input(\"Mã hợp đồng (HĐNVxxxx):\")\nho_ten = input(\"Họ tên nhân viên:\")\nvi_tri = input(\"Vị trí công việc:\")\nngay_bat_dau = input(\"Ngày bắt đầu (năm):\")\nluong_cb = input(\"Lương cơ bản:\")\nphu_cap = input(\"Phụ cấp:\")\nloai_du_an = input(\"Loại dự án (trong nuoc / nuoc ngoai / chien luoc):\").lower()\n\nhd = HopDongLaoDong(ma_hd, ho_ten, vi_tri, ngay_bat_dau, luong_cb, phu_cap)\nhd.hien_thi(loai_du_an)</code></pre>",
  "Nhận xét": "Bài viết có cấu trúc rõ ràng, chia nhỏ hợp lý các phương thức chức năng như tính thu nhập, thuế, hỗ trợ và hiển thị.<br>Sử dụng constructor hợp lý để khởi tạo đối tượng với đầy đủ tham số cần thiết.<br>Tính tổng thu nhập theo từng loại dự án đúng, có phân biệt trong nước, nước ngoài, chiến lược.<br>Thuế TNCN được tính đúng theo công thức và áp dụng giảm trừ 11 triệu hợp lý.<br>Chính sách hỗ trợ xét theo số năm làm việc và chức danh quản lý, phản ánh đúng yêu cầu bài toán.<br><br>- Chưa có kiểm tra định dạng mã hợp đồng `HĐNVxxxx`, thiếu `setter/getter` để kiểm soát tính hợp lệ.<br>- Phần nhập liệu không xử lý lỗi hoặc kiểm tra hợp lệ (ví dụ: lương âm, ngày sai format).<br>- Dữ liệu ngày được xử lý bằng cách tách chuỗi thay vì dùng `datetime`, dễ sai lệch nếu nhập sai format.<br>- Phần chính sách hỗ trợ không kiểm tra trường hợp năm âm (nếu hợp đồng trong tương lai).<br><br>Gợi ý:<br>- Nên sử dụng `datetime.strptime` để xử lý ngày chính xác và tránh lỗi định dạng.<br>- Bổ sung `try-except` hoặc validate dữ liệu nhập vào để tăng độ tin cậy cho chương trình.<br>- Có thể tách phần nhập dữ liệu và xử lý chính thành hàm `main()` để tăng tính mô-đun.<br><br>Tổng thể: Bài làm tốt, thể hiện nắm chắc kiến thức cơ bản OOP và các yêu cầu bài toán. Cần bổ sung thêm phần xử lý lỗi và kiểm tra dữ liệu để chương trình hoàn chỉnh, an toàn và linh hoạt hơn."
  }

]

